To Upload the following application in AWS Cloud 

we have 2 methods ---------------> Directly in AWS cloud environment
                      |
                      |__________> From VSCode 

    In both the methods we use AWS Elastic Beanstalk, which is a service that allows you to easily deploy and manage applications in the cloud.


        Now create floder name .ebextensions and in that create a file name python.config
        In python.config  keep thsi code  "  option_settings:
                                                aws:elasticbeanstalk:container:python:
                                                    WSGIPath: application:app   " 

        > .ebextensions Directory: This directory contains configuration files that allow you to customize and automate the environment setup on AWS Elastic Beanstalk.

        > python.config File: This file specifies environment options, particularly the WSGIPath, which is necessary for Elastic Beanstalk to know how to start your Flask application.

        > WSGIPath: This setting points Elastic Beanstalk to the entry point of your Flask application, ensuring it runs correctly in the deployed environment.
        
        

        Make sure the project sturcture is in this formate " My_Flask_app/
                                                                ├── app.py
                                                                ├── data/
                                                                │   └── DataSet.json
                                                                ├── requirements.txt
                                                                └── .ebextensions/
                                                                    └── python.config
                                                                                 "
        
    By using the .ebextensions directory and the python.config file, you ensure that your Flask application is configured and deployed correctly on AWS Elastic Beanstalk.

________________________________________________________________________________________________________________________________________________________________________________________________________________________________                      

>  Methon 1  ( Directly in AWS Cloud environment ) : 

                                                        Configure Environment:

Step1: Open AWS console and Search for elasticbeanstalk and click on " creatre application "

step2: we will be go to configure environment page where we define the parameters of our application to deploy it in AWS cloud.

step3: Select "web server environment" in environment tire and in application information give name to your application (eg: flast_app) 
       and leave the rest as it is  in " environment information " tab as it take and creates automatically in this service.
       { as of now we don't have any domain name so we will leave that to AWS service it will take care of that i.e why we leave the environment information tab. }

step4: In platform tab we choose the type of plantform that we ant to install in the server as i'm using python. Select "Python" and other tabs will automatically filled respective versions

**** Before going to next step just go to application location in ur local drive and zip the following ( application.py; data; requirements.txt; .ebextensions)   

step5: In application code select upload youe colde and upload the zip file .

step6: In Presets just go with free tire eligible one's.Go to next page 



                                                        Configure service access :

step1: In service access select " create and new service role  "
            > for service role it will directs selects the " aws-elasticbeanstalk-service-role "

            > before had create a key pair in ec2 tab and keep it handy.

step2: select the EC2 keypair.

            > For next step we need to create an IAM role. so go to IAM and go to roles 
            
            > select create role and in Trusted entity type select AWS service & in use case select EC2 & next  

            > Add permissions policies for the role ( for the policies we can get them form the configure service access tab go to view permissions details bellow EC2 instance profile and add them)
            
            > Name the role as ec2_EBS_role  

step3: select the ec2_EBS_role in  EC2 instance profile. Go to next page 


                                                        Set up networking, database, and tags :

  step1: For VPc select the default Vpc and for instance settings check the tick for Activited and leave the rest. Go to next page                                             



                                                        Configure instance traffic and scaling :

                                                        LEAVE IT AS IT IS 


                                                        Configure updates, monitoring, and logging - optional :


            step1: select thge Health report  to  Enchanced and click on next and create the elasticbeanstalk.



 >  Now we can see an elasticbeanstalk is been created and it will take some time after created copy the Domain url and check in web browser



   > Request Example

  * To search for videos with "Godzilla" in the title:         Domain url /search?title=Godzilla

  * To search for videos with "explosive" in the description:  Domain url /search?description=explosive

  * To search for videos with the tags "878" and "28":         Domain url /search?genre_ids=878&genre_ids=28

  * To search for videos with all of them combined             Domain url /search?title=Godzilla&description=showdown&genre_ids=878&genre_ids=28

  * To get all viedoes                                         GDomain url /search
   


---------------------------------------------------------------------------------------------------------------------------------------------------------------

****Response:****  

The response is a JSON array of video objects that match the search criteria.

[
    {
        "adult": false,
        "backdrop_path": "/j3Z3XktmWB1VhsS8iXNcrR86PXi.jpg",
        "genre_ids": [878, 28, 12],
        "id": 823464,
        "original_language": "en",
        "original_title": "Godzilla x Kong: The New Empire",
        "overview": "Following their explosive showdown, Godzilla and Kong must reunite against a colossal undiscovered threat hidden within our world, challenging their very existence – and our own.",
        "popularity": 7832.06,
        "poster_path": "/v4uvGFAkKuYfyKLGZnYj6l47ERQ.jpg",
        "release_date": "2024-03-27",
        "title": "Godzilla x Kong: The New Empire",
        "video": false,
        "vote_average": 7.249,
        "vote_count": 1920
    }
]



-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Methon2 (From VSCode):  

       >  Create an IAM user name as demo user and give administrator access.
       >  Create Access Key and copy them in a note pad. 
       >  AWS CLI installed and configured in VSCode terminal.
       >  AWS Elastic Beanstalk CLI installed in Vscode terminal.

> Initial Configuration: 

     Open a terminal and configure AWS CLI:  " aws configure "

     Initialize Elastic Beanstalk:  " eb init -p python-3.7 my-flask-app "

>  Deployment Steps :

    Step 1: Create an Environment : " eb create my-flask-env "

    Step 2: Deploy the Application : " eb deploy --version-label v1.0.0 "

    Step 3: Open the Application : " eb open "

> Testing the API
    Using Postman
    Testing the /search endpoint:
    URL: http://<your-env-url>.elasticbeanstalk.com/search
    Method: GET
    Parameters:
        title: Search for videos by title.
        description: Search for videos by description.
        genre_ids: Search for videos by genre IDs.    


> Example Queries:

Search by Title  -  http://<your-env-url>.elasticbeanstalk.com/search?title=Godzilla

Search by Description -  http://<your-env-url>.elasticbeanstalk.com/search?description=showdown

Search by Genre IDs -  http://<your-env-url>.elasticbeanstalk.com/search?genre_ids=878&genre_ids=28

Combined Search - http://<your-env-url>.elasticbeanstalk.com/search?title=Godzilla&description=showdown&genre_ids=878&genre_ids=28

---------------------------------------------------------------------------------------------------------------------------------------------------------------

****Response:****  

The response is a JSON array of video objects that match the search criteria.

[
    {
        "adult": false,
        "backdrop_path": "/j3Z3XktmWB1VhsS8iXNcrR86PXi.jpg",
        "genre_ids": [878, 28, 12],
        "id": 823464,
        "original_language": "en",
        "original_title": "Godzilla x Kong: The New Empire",
        "overview": "Following their explosive showdown, Godzilla and Kong must reunite against a colossal undiscovered threat hidden within our world, challenging their very existence – and our own.",
        "popularity": 7832.06,
        "poster_path": "/v4uvGFAkKuYfyKLGZnYj6l47ERQ.jpg",
        "release_date": "2024-03-27",
        "title": "Godzilla x Kong: The New Empire",
        "video": false,
        "vote_average": 7.249,
        "vote_count": 1920
    }
]



-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------




 